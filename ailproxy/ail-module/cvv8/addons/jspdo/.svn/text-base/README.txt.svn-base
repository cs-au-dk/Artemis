========================================================================
This is the quick and dirty README for the jspdo code...

========================================================================
To build this code:

- Edit the top of the makefile, if necessary, to point it to your v8,
sqlite3, and/or mysql. The Makefile assumes that the v8::convert
headers live at ../../include/.

- run 'make'

- Run the demo with: ./shell test.js


========================================================================
To include this code into your own project:

- Requirements:

  - zlib (header and library)
  - At least one of MySQL v5 and/or sqlite3 (headers and libraries)

- Copy the following files:

  cpdo*.?pp
  jspdo.?pp
  jspdo-init.cpp (GENERATED: see below)
  ../bytearray/bytearray.?pp

- Compile the following files: (required defines and whatnot are given
later on)

  cpdo_amalgamation.cpp
  jspdo.cpp (this will #include jspdo-init.cpp)
  bytearray.cpp


- #include jspdo.hpp into your app.

- Run v8::convert::JSPDO::SetupV8Bindings() from your v8-init 
routine, passing it the global object for your v8 engine (or some 
other object, if you prefer). It will install the class JSPDO in 
that object.

Compilation/Linker arguments:

See the included Makefile for the full list of various linker arguments.
Here is an overview:

General compiler/linker flags:

    Compiler:
        On Linux platforms, use -fPIC. Don't ask me why.
        -I.
        -I/path/to/v8/convert/install/prefix
    
    Linker:
        -lz (the ByteArray code uses zlib)

For v8:

    Linker: -L${V8_PREFIX} -lv8 (or -lv8_g)

For sqlite3:

    Linker: -lpthread might be required, depending on sqlite3 build options.

For cpdo_amalgamation.cpp:

    Enable sqlite3 driver:

        -DCPDO_ENABLE_SQLITE3=1

    Enable MySQL driver:

        -DCPDO_ENABLE_MYSQL5=1
        Add the flags from (mysql_config --cflags)

For jspdo.cpp:

        -I/path/to/v8/convert/install/prefix

Linking:
     - If using MySQL add: (mysql_config --libs).
     - If using sqlite3 add: -lsqlite3 or link in your own copy of
     sqlite3.o

When using MySQL it is impossible (at least on Linux) to build a 
static binary because MySQL links to libraries which cannot work in 
statically-linked applications. That said, v8 has that same 
restriction (because it uses getaddrinfo(3) internally) so statically
linking is basically ruled out on Linux.

If neither sqlite3 nor MySQL are enabled then the library will be
useless - it will not be able to connect to anything.

When building JSPDO as a library, as opposed to an application, be 
sure to link the DLL to the MySQL/sqlite3 libraries (or include your 
own sqlite3.o in the build). If you do not then the client code 
linking to your library will have to explicitly link to them (and 
cannot generically know which one(s) he needs to link to).

========================================================================
jspdo-init.cpp (GENERATED CODE):

This file is generated by doing the following:

~> cc -o js2c js2c.c
~> ./js2c jspdoInitCode < jspdo-init.js > jspdo-init.cpp

It is #included by jspdo.cpp and should not be compiled into its own
object file.
